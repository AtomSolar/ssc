#ifndef _LIB_BATTERY_POWERFLOW_H_
#define _LIB_BATTERY_POWERFLOW_H_

#include <memory>

struct BatteryPower;


/**
* \class BatteryPowerFlow
*
* \brief
*
*  The BatteryPowerFlow class provides the calculations for which components of the system power flow to/from the battery,
*  which power components go to meet the electric load, and how the utility grid is used.  It is meant to be shared by
*  the lib_power_electronics charge controllers, which require AC power calculations, and the battery dispatch model, 
*  which require DC power calculations.
*/

class BatteryPowerFlow
{
public:
	/// Create a BatteryPowerFlow object
	BatteryPowerFlow();

	/// Calculate the power flow for an AC connected battery system, return the run status
	void calculateACConnected();

	/// Calculate the power flow for an DC connected battery system, return the run status
	void calculateDCConnected();

private:

	/// Initialize the BatteryPowerObjects to 0


	std::unique_ptr<BatteryPower> m_powerFlowAC;   /// A structure containing the AC power flow components 
	std::unique_ptr<BatteryPower> m_powerFlowDC;   /// A structure containing the DC power flow components
};

/**
* \struct BatteryPowerFlow
*
* \brief
*
*  The BatteryPower structure contains all of the power flow components for a battery simulation
*  The structure also contains information about the single point efficiecies required to convert power from one form to another
*  Power quantities in BatteryPower are either all AC or all DC depending on which part of the controller is looking at it
*/

struct BatteryPower
{
public:

	/// Create a BatteryPower object.
	BatteryPower();

	double powerPV;				   /// The power production of the PV array (kW)
	double powerLoad;			   /// The power required by the electric load (kW)
	double powerBattery; 	       /// The power flow to and from the battery (> 0, discharging, < 0 charging) (kW)
	double powerGrid;              /// The power flow to and from the grid (> 0, to grid, < 0 from grid) (kW)
	double powerGeneratedBySystem; /// The power generated by the combined power generator and battery (kW)
	double powerPVToLoad;          /// The power from PV to the electric load (kW)
	double powerPVToBattery;       /// The power from PV to the battery (kW)
	double powerPVToGrid;          /// The power from PV to the grid (kW)
	double powerGridToBattery;     /// The power from the grid to the battery (kW)
	double powerGridToLoad;        /// The power from the grid to the electric load (kW)
	double powerBatteryToLoad;     /// The power from the battery to the electric load (kW)
	double powerBatteryToGrid;     /// The power from the battery to the grid (kW)
	double powerPVInverterDraw;	   /// The power draw from the PV inverter (kW)
	double powerSystemLoss;        /// The parasitic power loss in the system (kW)

	double singlePointEfficiencyACToDC;  /// The conversion efficiency from AC power to DC power within the battery microinverter (0 - 100)
	double singlePointEfficiencyDCToAC;  /// The conversion efficiency from DC power to AC power within the battery microinverter (0 - 100)
	double singlePointEfficiencyDCToDC;  /// The conversion efficiency from DC power to DC power within the battery management system (0 - 100)

	double tolerance;			  /// A numerical tolerance. Below this value, zero out the power flow
};


#endif